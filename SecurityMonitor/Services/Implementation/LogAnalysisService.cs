
using SecurityMonitor.Data;
using SecurityMonitor.Models;
using SecurityMonitor.Services.Interfaces;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using SecurityMonitor.DTOs.Alerts;
using Microsoft.Extensions.DependencyInjection;

namespace SecurityMonitor.Services.Implementation
{
    public class LogAnalysisService : ILogAnalysisService
    {
        private readonly IServiceScopeFactory _scopeFactory;
        private readonly ILogger<LogAnalysisService> _logger;
        private DateTime _lastAnalysisTime = DateTime.UtcNow;
        private readonly TimeSpan _analysisInterval = TimeSpan.FromSeconds(30); // Ph√¢n t√≠ch m·ªói 30 gi√¢y

        public LogAnalysisService(
            IServiceScopeFactory scopeFactory,
            ILogger<LogAnalysisService> logger)
        {
            _scopeFactory = scopeFactory;
            _logger = logger;
        }

        public bool ShouldAnalyzeLogs()
        {
            // Ph√¢n t√≠ch logs m·ªói 30 gi√¢y
            return DateTime.UtcNow - _lastAnalysisTime >= _analysisInterval;
        }

        public async Task AnalyzeRecentLogsAndCreateAlertsAsync()
        {
            using var scope = _scopeFactory.CreateScope();
            var context = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
            var alertService = scope.ServiceProvider.GetRequiredService<IAlertService>();

            try
            {
                // L·∫•y logs trong 5 ph√∫t g·∫ßn ƒë√¢y
                var recentLogs = await context.LogEntries
                    .Where(l => l.Timestamp >= DateTime.UtcNow.AddMinutes(-5))
                    .OrderByDescending(l => l.Timestamp)
                    .ToListAsync();

                if (!recentLogs.Any())
                {
                    _logger.LogInformation("üìä Kh√¥ng c√≥ logs g·∫ßn ƒë√¢y ƒë·ªÉ ph√¢n t√≠ch");
                    return;
                }

                _logger.LogInformation("üîç Ph√¢n t√≠ch {Count} logs g·∫ßn ƒë√¢y", recentLogs.Count);

                // Ph√¢n t√≠ch c√°c pattern ƒë√°ng ng·ªù
                await AnalyzeFailedLoginPatterns(recentLogs, alertService);
                await AnalyzeSuspiciousActivityPatterns(recentLogs, alertService);
                await AnalyzeErrorRatePatterns(recentLogs, alertService);
                await AnalyzeUnusualAccessPatterns(recentLogs, alertService);
                
                // Ph√¢n t√≠ch theo t·ª´ng ngu·ªìn logs
                await AnalyzeApacheLogs(recentLogs, alertService);
                await AnalyzeNginxLogs(recentLogs, alertService);
                await AnalyzeWindowsLogs(recentLogs, alertService);
                await AnalyzeLinuxLogs(recentLogs, alertService);
                await AnalyzeMySQLLogs(recentLogs, alertService);
                await AnalyzeCustomAppLogs(recentLogs, alertService);
                
                // Ph√¢n t√≠ch ho·∫°t ƒë·ªông user ƒë√°ng ng·ªù
                await AnalyzeUserPasswordChangePatterns(recentLogs, alertService);
                await AnalyzeUserEmailChangePatterns(recentLogs, alertService);

                _lastAnalysisTime = DateTime.UtcNow;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå L·ªói khi ph√¢n t√≠ch logs");
            }
        }

        private async Task AnalyzeFailedLoginPatterns(List<LogEntry> logs, IAlertService alertService)
        {
            // T√¨m c√°c IP c√≥ nhi·ªÅu l·∫ßn ƒëƒÉng nh·∫≠p th·∫•t b·∫°i
            var failedLogins = logs.Where(l => 
                (l.Message.Contains("login") && l.Message.Contains("failed", StringComparison.OrdinalIgnoreCase)) ||
                (l.Message.Contains("Failed login attempt")) ||
                (l.Message.Contains("Multiple failed login attempts")) &&
                !l.WasSuccessful)
                .GroupBy(l => l.IpAddress)
                .Where(g => g.Count() >= 2) // Gi·∫£m xu·ªëng 2 l·∫ßn th·∫•t b·∫°i
                .ToList();

            foreach (var group in failedLogins)
            {
                var alert = new Alert
                {
                    Title = "Ph√°t hi·ªán t·∫•n c√¥ng brute force",
                    Description = $"IP {group.Key} c√≥ {group.Count()} l·∫ßn ƒëƒÉng nh·∫≠p th·∫•t b·∫°i trong 5 ph√∫t qua",
                    SourceIp = group.Key,
                    AlertTypeId = (int)AlertTypeId.BruteForce,
                    SeverityLevelId = (int)SeverityLevelId.High,
                    StatusId = (int)AlertStatusId.New,
                    Timestamp = DateTime.UtcNow
                };

                await alertService.CreateAlertAsync(alert);
                _logger.LogWarning("üö® Ph√°t hi·ªán brute force t·ª´ IP: {IP}", group.Key);
            }
        }

        private async Task AnalyzeSuspiciousActivityPatterns(List<LogEntry> logs, IAlertService alertService)
        {
            // T√¨m c√°c ho·∫°t ƒë·ªông ƒë√°ng ng·ªù
            var suspiciousLogs = logs.Where(l => 
                l.Message.Contains("suspicious", StringComparison.OrdinalIgnoreCase) ||
                l.Message.Contains("unusual", StringComparison.OrdinalIgnoreCase) ||
                l.Message.Contains("anomaly", StringComparison.OrdinalIgnoreCase) ||
                l.Message.Contains("Suspicious activity detected") ||
                l.Message.Contains("Unusual access pattern") ||
                l.Message.Contains("Anomaly detected"))
                .GroupBy(l => l.IpAddress)
                .ToList();

            foreach (var group in suspiciousLogs)
            {
                var alert = new Alert
                {
                    Title = "Ph√°t hi·ªán ho·∫°t ƒë·ªông ƒë√°ng ng·ªù",
                    Description = $"IP {group.Key} c√≥ {group.Count()} ho·∫°t ƒë·ªông ƒë√°ng ng·ªù",
                    SourceIp = group.Key,
                    AlertTypeId = (int)AlertTypeId.SuspiciousIP,
                    SeverityLevelId = (int)SeverityLevelId.Medium,
                    StatusId = (int)AlertStatusId.New,
                    Timestamp = DateTime.UtcNow
                };

                await alertService.CreateAlertAsync(alert);
                _logger.LogWarning("üö® Ph√°t hi·ªán ho·∫°t ƒë·ªông ƒë√°ng ng·ªù t·ª´ IP: {IP}", group.Key);
            }
        }

        private async Task AnalyzeErrorRatePatterns(List<LogEntry> logs, IAlertService alertService)
        {
            // T√≠nh t·ª∑ l·ªá l·ªói
            var totalLogs = logs.Count;
            var errorLogs = logs.Where(l => l.LogLevelTypeId == 3 || !l.WasSuccessful).Count();
            
            if (totalLogs > 0 && (double)errorLogs / totalLogs > 0.3) // 30% l·ªói tr·ªü l√™n
            {
                var alert = new Alert
                {
                    Title = "T·ª∑ l·ªá l·ªói cao b·∫•t th∆∞·ªùng",
                    Description = $"T·ª∑ l·ªá l·ªói: {errorLogs}/{totalLogs} ({((double)errorLogs/totalLogs*100):F1}%)",
                    SourceIp = "System",
                    AlertTypeId = (int)AlertTypeId.SuspiciousIP,
                    SeverityLevelId = (int)SeverityLevelId.High,
                    StatusId = (int)AlertStatusId.New,
                    Timestamp = DateTime.UtcNow
                };

                await alertService.CreateAlertAsync(alert);
                _logger.LogWarning("üö® Ph√°t hi·ªán t·ª∑ l·ªá l·ªói cao: {ErrorRate}%", ((double)errorLogs/totalLogs*100));
            }
        }

        private async Task AnalyzeUnusualAccessPatterns(List<LogEntry> logs, IAlertService alertService)
        {
            // T√¨m c√°c IP truy c·∫≠p qu√° nhi·ªÅu endpoint kh√°c nhau t·ª´ T·∫§T C·∫¢ ngu·ªìn logs
            var accessPatterns = logs
                .GroupBy(l => l.IpAddress)
                .Where(g => g.Select(l => l.Message).Distinct().Count() > 3) // Gi·∫£m xu·ªëng 3 endpoint kh√°c nhau
                .ToList();

            foreach (var group in accessPatterns)
            {
                var uniqueEndpoints = group.Select(l => l.Message).Distinct().Count();
                var alert = new Alert
                {
                    Title = "Ph√°t hi·ªán truy c·∫≠p b·∫•t th∆∞·ªùng",
                    Description = $"IP {group.Key} truy c·∫≠p {uniqueEndpoints} endpoint kh√°c nhau t·ª´ nhi·ªÅu ngu·ªìn trong 5 ph√∫t",
                    SourceIp = group.Key,
                    AlertTypeId = (int)AlertTypeId.SuspiciousIP,
                    SeverityLevelId = (int)SeverityLevelId.Medium,
                    StatusId = (int)AlertStatusId.New,
                    Timestamp = DateTime.UtcNow
                };

                await alertService.CreateAlertAsync(alert);
                _logger.LogWarning("üö® Ph√°t hi·ªán truy c·∫≠p b·∫•t th∆∞·ªùng t·ª´ IP: {IP}", group.Key);
            }
        }

        private async Task AnalyzeApacheLogs(List<LogEntry> logs, IAlertService alertService)
        {
            // Ph√¢n t√≠ch Apache logs (LogSourceId = 1)
            var apacheLogs = logs.Where(l => l.LogSourceId == 1).ToList();
            
            if (!apacheLogs.Any()) return;

            // T√¨m c√°c IP c√≥ nhi·ªÅu request l·ªói 4xx/5xx
            var errorRequests = apacheLogs
                .Where(l => l.Message.Contains("4") || l.Message.Contains("5"))
                .GroupBy(l => l.IpAddress)
                .Where(g => g.Count() >= 2)
                .ToList();

            foreach (var group in errorRequests)
            {
                var alert = new Alert
                {
                    Title = "Ph√°t hi·ªán nhi·ªÅu request l·ªói t·ª´ Apache",
                    Description = $"IP {group.Key} c√≥ {group.Count()} request l·ªói t·ª´ Apache trong 5 ph√∫t",
                    SourceIp = group.Key,
                    AlertTypeId = (int)AlertTypeId.SuspiciousIP,
                    SeverityLevelId = (int)SeverityLevelId.Medium,
                    StatusId = (int)AlertStatusId.New,
                    Timestamp = DateTime.UtcNow
                };

                await alertService.CreateAlertAsync(alert);
                _logger.LogWarning("üö® Ph√°t hi·ªán nhi·ªÅu request l·ªói Apache t·ª´ IP: {IP}", group.Key);
            }
        }

        private async Task AnalyzeNginxLogs(List<LogEntry> logs, IAlertService alertService)
        {
            // Ph√¢n t√≠ch Nginx logs (LogSourceId = 2)
            var nginxLogs = logs.Where(l => l.LogSourceId == 2).ToList();
            
            if (!nginxLogs.Any()) return;

            // T√¨m c√°c IP c√≥ nhi·ªÅu l·ªói nginx
            var errorLogs = nginxLogs
                .Where(l => !l.WasSuccessful)
                .GroupBy(l => l.IpAddress)
                .Where(g => g.Count() >= 2)
                .ToList();

            foreach (var group in errorLogs)
            {
                var alert = new Alert
                {
                    Title = "Ph√°t hi·ªán nhi·ªÅu l·ªói Nginx",
                    Description = $"IP {group.Key} c√≥ {group.Count()} l·ªói Nginx trong 5 ph√∫t",
                    SourceIp = group.Key,
                    AlertTypeId = (int)AlertTypeId.SuspiciousIP,
                    SeverityLevelId = (int)SeverityLevelId.Medium,
                    StatusId = (int)AlertStatusId.New,
                    Timestamp = DateTime.UtcNow
                };

                await alertService.CreateAlertAsync(alert);
                _logger.LogWarning("üö® Ph√°t hi·ªán nhi·ªÅu l·ªói Nginx t·ª´ IP: {IP}", group.Key);
            }
        }

        private async Task AnalyzeWindowsLogs(List<LogEntry> logs, IAlertService alertService)
        {
            // Ph√¢n t√≠ch Windows logs (LogSourceId = 3)
            var windowsLogs = logs.Where(l => l.LogSourceId == 3).ToList();
            
            if (!windowsLogs.Any()) return;

            // T√¨m c√°c event b·∫£o m·∫≠t ƒë√°ng ng·ªù
            var securityEvents = windowsLogs
                .Where(l => l.Message.Contains("Security") && !l.WasSuccessful)
                .GroupBy(l => l.IpAddress)
                .Where(g => g.Count() >= 1)
                .ToList();

            foreach (var group in securityEvents)
            {
                var alert = new Alert
                {
                    Title = "Ph√°t hi·ªán event b·∫£o m·∫≠t Windows",
                    Description = $"IP {group.Key} c√≥ {group.Count()} event b·∫£o m·∫≠t Windows trong 5 ph√∫t",
                    SourceIp = group.Key,
                    AlertTypeId = (int)AlertTypeId.SuspiciousIP,
                    SeverityLevelId = (int)SeverityLevelId.High,
                    StatusId = (int)AlertStatusId.New,
                    Timestamp = DateTime.UtcNow
                };

                await alertService.CreateAlertAsync(alert);
                _logger.LogWarning("üö® Ph√°t hi·ªán event b·∫£o m·∫≠t Windows t·ª´ IP: {IP}", group.Key);
            }
        }

        private async Task AnalyzeLinuxLogs(List<LogEntry> logs, IAlertService alertService)
        {
            // Ph√¢n t√≠ch Linux logs (LogSourceId = 4)
            var linuxLogs = logs.Where(l => l.LogSourceId == 4).ToList();
            
            if (!linuxLogs.Any()) return;

            // T√¨m c√°c l·ªói SSH ƒë√°ng ng·ªù
            var sshErrors = linuxLogs
                .Where(l => l.Message.Contains("sshd") && l.Message.Contains("Failed"))
                .GroupBy(l => l.IpAddress)
                .Where(g => g.Count() >= 2)
                .ToList();

            foreach (var group in sshErrors)
            {
                var alert = new Alert
                {
                    Title = "Ph√°t hi·ªán t·∫•n c√¥ng SSH",
                    Description = $"IP {group.Key} c√≥ {group.Count()} l·∫ßn th·∫•t b·∫°i SSH trong 5 ph√∫t",
                    SourceIp = group.Key,
                    AlertTypeId = (int)AlertTypeId.BruteForce,
                    SeverityLevelId = (int)SeverityLevelId.High,
                    StatusId = (int)AlertStatusId.New,
                    Timestamp = DateTime.UtcNow
                };

                await alertService.CreateAlertAsync(alert);
                _logger.LogWarning("üö® Ph√°t hi·ªán t·∫•n c√¥ng SSH t·ª´ IP: {IP}", group.Key);
            }
        }

        private async Task AnalyzeMySQLLogs(List<LogEntry> logs, IAlertService alertService)
        {
            // Ph√¢n t√≠ch MySQL logs (LogSourceId = 5)
            var mysqlLogs = logs.Where(l => l.LogSourceId == 5).ToList();
            
            if (!mysqlLogs.Any()) return;

            // T√¨m c√°c l·ªói database ƒë√°ng ng·ªù
            var dbErrors = mysqlLogs
                .Where(l => !l.WasSuccessful)
                .GroupBy(l => l.IpAddress)
                .Where(g => g.Count() >= 2)
                .ToList();

            foreach (var group in dbErrors)
            {
                var alert = new Alert
                {
                    Title = "Ph√°t hi·ªán nhi·ªÅu l·ªói MySQL",
                    Description = $"IP {group.Key} c√≥ {group.Count()} l·ªói MySQL trong 5 ph√∫t",
                    SourceIp = group.Key,
                    AlertTypeId = (int)AlertTypeId.SuspiciousIP,
                    SeverityLevelId = (int)SeverityLevelId.Medium,
                    StatusId = (int)AlertStatusId.New,
                    Timestamp = DateTime.UtcNow
                };

                await alertService.CreateAlertAsync(alert);
                _logger.LogWarning("üö® Ph√°t hi·ªán nhi·ªÅu l·ªói MySQL t·ª´ IP: {IP}", group.Key);
            }
        }

        private async Task AnalyzeCustomAppLogs(List<LogEntry> logs, IAlertService alertService)
        {
            // Ph√¢n t√≠ch Custom App logs (LogSourceId = 1 nh∆∞ng c√≥ pattern kh√°c)
            var customAppLogs = logs.Where(l => l.LogSourceId == 1 && l.UserId != "Apache").ToList();
            
            if (!customAppLogs.Any()) return;

            // T√¨m c√°c ho·∫°t ƒë·ªông ƒë√°ng ng·ªù t·ª´ custom app
            var suspiciousActions = customAppLogs
                .Where(l => l.Message.Contains("FAILED") || !l.WasSuccessful)
                .GroupBy(l => l.IpAddress)
                .Where(g => g.Count() >= 2)
                .ToList();

            foreach (var group in suspiciousActions)
            {
                var alert = new Alert
                {
                    Title = "Ph√°t hi·ªán ho·∫°t ƒë·ªông ƒë√°ng ng·ªù t·ª´ Custom App",
                    Description = $"IP {group.Key} c√≥ {group.Count()} ho·∫°t ƒë·ªông th·∫•t b·∫°i t·ª´ Custom App trong 5 ph√∫t",
                    SourceIp = group.Key,
                    AlertTypeId = (int)AlertTypeId.SuspiciousIP,
                    SeverityLevelId = (int)SeverityLevelId.Medium,
                    StatusId = (int)AlertStatusId.New,
                    Timestamp = DateTime.UtcNow
                };

                await alertService.CreateAlertAsync(alert);
                _logger.LogWarning("üö® Ph√°t hi·ªán ho·∫°t ƒë·ªông ƒë√°ng ng·ªù t·ª´ Custom App t·ª´ IP: {IP}", group.Key);
            }
        }

        private async Task AnalyzeUserPasswordChangePatterns(List<LogEntry> logs, IAlertService alertService)
        {
            // Ph√¢n t√≠ch user ƒë·ªïi password nhi·ªÅu l·∫ßn
            var passwordChangeLogs = logs
                .Where(l => l.Message.Contains("changed password") && !string.IsNullOrEmpty(l.UserId))
                .GroupBy(l => l.UserId)
                .Where(g => g.Count() >= 3) // 3 l·∫ßn ƒë·ªïi password trong 5 ph√∫t
                .ToList();

            foreach (var group in passwordChangeLogs)
            {
                var alert = new Alert
                {
                    Title = "Ph√°t hi·ªán ƒë·ªïi password nhi·ªÅu l·∫ßn",
                    Description = $"User {group.Key} ƒë√£ ƒë·ªïi password {group.Count()} l·∫ßn trong 5 ph√∫t qua",
                    SourceIp = group.First().IpAddress,
                    AlertTypeId = (int)AlertTypeId.SuspiciousIP,
                    SeverityLevelId = (int)SeverityLevelId.High,
                    StatusId = (int)AlertStatusId.New,
                    Timestamp = DateTime.UtcNow
                };

                await alertService.CreateAlertAsync(alert);
                _logger.LogWarning("üö® Ph√°t hi·ªán user ƒë·ªïi password nhi·ªÅu l·∫ßn: {UserId}", group.Key);
            }
        }

        private async Task AnalyzeUserEmailChangePatterns(List<LogEntry> logs, IAlertService alertService)
        {
            // Ph√¢n t√≠ch user ƒë·ªïi email nhi·ªÅu l·∫ßn
            var emailChangeLogs = logs
                .Where(l => l.Message.Contains("requested email change") && !string.IsNullOrEmpty(l.UserId))
                .GroupBy(l => l.UserId)
                .Where(g => g.Count() >= 2) // 2 l·∫ßn ƒë·ªïi email trong 5 ph√∫t
                .ToList();

            foreach (var group in emailChangeLogs)
            {
                var alert = new Alert
                {
                    Title = "Ph√°t hi·ªán ƒë·ªïi email nhi·ªÅu l·∫ßn",
                    Description = $"User {group.Key} ƒë√£ y√™u c·∫ßu ƒë·ªïi email {group.Count()} l·∫ßn trong 5 ph√∫t qua",
                    SourceIp = group.First().IpAddress,
                    AlertTypeId = (int)AlertTypeId.SuspiciousIP,
                    SeverityLevelId = (int)SeverityLevelId.High,
                    StatusId = (int)AlertStatusId.New,
                    Timestamp = DateTime.UtcNow
                };

                await alertService.CreateAlertAsync(alert);
                _logger.LogWarning("üö® Ph√°t hi·ªán user ƒë·ªïi email nhi·ªÅu l·∫ßn: {UserId}", group.Key);
            }
        }
    }
} 