using Microsoft.AspNetCore.Identity;
using System.Net;
using System.Security.Claims;
using SecurityMonitor.Models;
using SecurityMonitor.Services;
using SecurityMonitor.Services.Interfaces;
using Microsoft.AspNetCore.Http;
using SecurityMonitor.Extensions;
using SecurityMonitor.Services.Implementation;
using Microsoft.Extensions.DependencyInjection;
using SecurityMonitor.Services.Interfaces;

namespace SecurityMonitor.Middleware
{
    public class LoginMonitorMiddleware
    {

        private readonly RequestDelegate _next;
        private readonly ILogger<LoginMonitorMiddleware> _logger;

        private string GetRealPublicIP(string ipAddress)
        {
            // Ki·ªÉm tra IP r·ªóng
            if (string.IsNullOrEmpty(ipAddress))
                return "unknown";

            // Parse IP address
            if (IPAddress.TryParse(ipAddress, out var parsedIP))
            {
                // Chuy·ªÉn IPv6 v·ªÅ IPv4 n·∫øu c√≥ th·ªÉ
                if (parsedIP.IsIPv4MappedToIPv6)
                    parsedIP = parsedIP.MapToIPv4();
                
                return parsedIP.ToString();
            }
            return "unknown";
        }

        private bool IsPrivateIP(string ipAddress)
        {
            if (string.IsNullOrEmpty(ipAddress) || ipAddress == "unknown" || ipAddress == "localhost" || ipAddress == "::1" || ipAddress == "127.0.0.1")
                return true;

            if (IPAddress.TryParse(ipAddress, out var parsedIP))
            {
                var bytes = parsedIP.GetAddressBytes();
                if (parsedIP.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                {
                    // Check for IPv4 private ranges
                    return bytes[0] == 10 || // 10.x.x.x
                           (bytes[0] == 172 && bytes[1] >= 16 && bytes[1] <= 31) || // 172.16.x.x - 172.31.x.x
                           (bytes[0] == 192 && bytes[1] == 168); // 192.168.x.x
                }
                else if (parsedIP.IsIPv6LinkLocal || parsedIP.IsIPv6SiteLocal)
                {
                    return true;
                }
            }
            return false;
        }

        public LoginMonitorMiddleware(RequestDelegate next, ILogger<LoginMonitorMiddleware> logger)
        {
            _next = next;
            _logger = logger;
        }

        private string GetClientIpAddress(HttpContext context)
        {
            // Debug t·∫•t c·∫£ c√°c headers
            foreach (var header in context.Request.Headers)
            {
                _logger.LogInformation("üîç Header {Key}: {Value}", header.Key, header.Value);
            }

            // Th·ª≠ l·∫•y IP t·ª´ c√°c header kh√°c nhau theo th·ª© t·ª± ∆∞u ti√™n
            string? ip = null;

            // 1. Th·ª≠ X-Real-IP tr∆∞·ªõc (th∆∞·ªùng ƒë∆∞·ª£c set b·ªüi nginx)
            if (context.Request.Headers.TryGetValue("X-Real-IP", out var realIp))
            {
                ip = realIp.ToString();
                _logger.LogInformation("üìç Found X-Real-IP: {IP}", ip);
            }

            // 2. Th·ª≠ X-Forwarded-For n·∫øu kh√¥ng c√≥ X-Real-IP
            if (string.IsNullOrEmpty(ip) && context.Request.Headers.TryGetValue("X-Forwarded-For", out var forwardedFor))
            {
                ip = forwardedFor.ToString().Split(',')[0].Trim();
                _logger.LogInformation("üìç Found X-Forwarded-For: {IP}", ip);
            }

            // 3. Cu·ªëi c√πng d√πng RemoteIpAddress
            if (string.IsNullOrEmpty(ip) && context.Connection.RemoteIpAddress != null)
            {
                ip = context.Connection.RemoteIpAddress.ToString();
                if (context.Connection.RemoteIpAddress.IsIPv4MappedToIPv6)
                {
                    ip = context.Connection.RemoteIpAddress.MapToIPv4().ToString();
                }
                _logger.LogInformation("üìç Using RemoteIpAddress: {IP}", ip);
            }

            // Ki·ªÉm tra IP c√≥ ph·∫£i private/localhost kh√¥ng
            if (!string.IsNullOrEmpty(ip))
            {
                if (ip == "::1" || ip == "127.0.0.1" || ip.ToLower() == "localhost")
                {
                    _logger.LogWarning("‚ö†Ô∏è Got localhost IP, trying to find real IP...");
                    // Th·ª≠ t√¨m IP th·∫≠t t·ª´ c√°c header kh√°c
                    if (context.Request.Headers.TryGetValue("X-Forwarded-Host", out var host))
                    {
                        var possibleIp = host.ToString().Split(':')[0];
                        if (IPAddress.TryParse(possibleIp, out _))
                        {
                            ip = possibleIp;
                            _logger.LogInformation("üìç Using IP from X-Forwarded-Host: {IP}", ip);
                        }
                    }
                }
                else if (IsPrivateIP(ip))
                {
                    _logger.LogWarning("‚ö†Ô∏è Got private IP: {IP}, trying to find public IP...", ip);
                }
            }

            if (string.IsNullOrEmpty(ip))
            {
                _logger.LogWarning("‚ö†Ô∏è Could not determine client IP!");
                ip = "unknown";
            }

            _logger.LogInformation("‚úÖ Final determined IP: {IP}", ip);
            return ip;
        }

        public async Task InvokeAsync(
            HttpContext context,
            SignInManager<ApplicationUser> signInManager,
            IServiceProvider serviceProvider)
        {
            // 1. L·∫•y IP c·ªßa client khi v·ª´a v√†o web
            var clientIP = GetClientIpAddress(context);
            _logger.LogInformation("‚≠ê C√≥ ng∆∞·ªùi truy c·∫≠p v·ªõi IP: {IP}", clientIP);
            _logger.LogInformation("üìç ƒê∆∞·ªùng d·∫´n truy c·∫≠p: {Path}", context.Request.Path);

            // Ki·ªÉm tra IP c√≥ b·ªã block kh√¥ng
            using (var scope = serviceProvider.CreateScope())
            {
                var ipBlockingService = scope.ServiceProvider.GetRequiredService<IIPBlockingService>();
                if (await ipBlockingService.IsIPBlockedAsync(clientIP))
                {
                    _logger.LogWarning("üö´ IP b·ªã ch·∫∑n ƒëang c·ªë truy c·∫≠p: {IP}", clientIP);
                    context.Response.StatusCode = 403;
                    await context.Response.WriteAsync("Access denied - Your IP has been blocked.");
                    return;
                }
            }

            // 2. L∆∞u IP ƒë·ªÉ d√πng sau
            context.Items["ClientIP"] = clientIP;

            // 3. Ki·ªÉm tra c√≥ ph·∫£i request login kh√¥ng
            var wasAuthenticated = context.User?.Identity?.IsAuthenticated ?? false;
            
            // 4. X·ª≠ l√Ω request
            await _next(context);

            // Ki·ªÉm tra n·∫øu l√† request ƒëƒÉng nh·∫≠p th√†nh c√¥ng
            if (!wasAuthenticated && context.User?.Identity?.IsAuthenticated == true)
            {
                var ipAddress = context.Items["ClientIP"]?.ToString() ?? GetClientIpAddress(context);
                var username = context.User.Identity?.Name ?? "unknown";

                // L·∫•y service ƒë·ªÉ ki·ªÉm tra IP
                using var scope = serviceProvider.CreateScope();
                var auditService = scope.ServiceProvider.GetRequiredService<IAuditService>();
                var alertService = scope.ServiceProvider.GetRequiredService<IAlertService>();
                var ipCheckerService = scope.ServiceProvider.GetRequiredService<IIPCheckerService>();

                // Log audit
                var userId = context.User?.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                await auditService.LogActivityAsync(
                    userId: userId ?? "anonymous",
                    action: "Login Success",
                    entityType: "Authentication",
                    entityId: username,
                    details: $"User {username} logged in from {ipAddress}",
                    ipAddress: ipAddress);

                _logger.LogInformation("üë§ Ng∆∞·ªùi d√πng {Username} ƒëƒÉng nh·∫≠p t·ª´ IP {IP}", username, ipAddress);

                // Ki·ªÉm tra IP c√≥ ƒë√°ng ng·ªù kh√¥ng
                var alerts = await ipCheckerService.CheckIPAsync(ipAddress);

                if (alerts.Any())
                {
                    foreach (var alert in alerts)
                    {
                        // Th√™m th√¥ng tin v·ªÅ user ƒëƒÉng nh·∫≠p v√†o c·∫£nh b√°o
                        alert.Description += $"\nNg∆∞·ªùi d√πng: {username}";
                        await alertService.CreateAlertAsync(alert);

                        _logger.LogWarning("üö® Ph√°t hi·ªán IP ƒë√°ng ng·ªù: {IP} t·ª´ user {Username}", ipAddress, username);
                    }
                }
            }
        }
    }

}
