@model List<SecurityMonitor.DTOs.UserManagementDto>
@{
    ViewData["Title"] = "Quản lý người dùng";
    Layout = "_AdminLayout";
}
<div class="container-fluid">
    <h3>Quản lý người dùng</h3>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Email</th>
                <th>Tên đăng nhập</th>
                <th>Vai trò</th>
                <th>Trạng thái</th>
                <th>Thao tác</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in Model)
            {
                <tr data-user-id="@user.Id" class="@(user.IsLocked ? "table-danger" : user.IsRestricted ? "table-warning" : "")">
                    <td>@user.Email</td>
                    <td>@user.UserName</td>
                    <td>@string.Join(", ", user.Roles)</td>
                    <td>
                        @if (user.IsLocked)
                        {
                            <span class="badge bg-danger">Đã khóa</span>
                        }
                        else if (user.IsRestricted)
                        {
                            <span class="badge bg-warning">Bị hạn chế</span>
                        }
                        else
                        {
                            <span class="badge bg-success">Hoạt động</span>
                        }
                    </td>
                    <td>
                        <div class="btn-group">
                            @if (!user.IsLocked)
                            {
                                <button onclick="handleLock('@user.Id', '@user.Email')" class="btn btn-sm btn-danger">
                                    <i class="fas fa-lock"></i> Khóa
                                </button>
                            }
                            else
                            {
                                <button onclick="handleUnlock('@user.Id', '@user.Email')" class="btn btn-sm btn-success">
                                    <i class="fas fa-unlock"></i> Mở khóa
                                </button>
                            }

                            @if (!user.IsLocked && !user.IsRestricted)
                            {
                                <button onclick="handleRestrict('@user.Id', '@user.Email')" class="btn btn-sm btn-warning">
                                    <i class="fas fa-ban"></i> Hạn chế
                                </button>
                            }
                            else if (user.IsRestricted)
                            {
                                <button onclick="handleUnrestrict('@user.Id', '@user.Email')" class="btn btn-sm btn-info">
                                    <i class="fas fa-check"></i> Bỏ hạn chế
                                </button>
                            }
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet">
    <link href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css" rel="stylesheet">
    <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <script>
        // Cấu hình thông báo
        toastr.options = {
            "closeButton": true,
            "progressBar": true,
            "positionClass": "toast-top-right",
        }

        // Khai báo các hàm xử lý
        async function handleLock(userId, email) {
            try {
                toastr.info("Đang khóa tài khoản...", "", {
                    timeOut: 5000,
                    extendedTimeOut: 2000
                });
                const response = await fetch('/UserAdmin/Lock?id=' + userId, {
                    method: 'POST',
                    headers: {
                        'Accept': 'application/json'
                    }
                });
                
                // Cập nhật UI ngay lập tức nếu status code là 200-299
                if (response.ok) {
                    // Cập nhật UI ngay lập tức
                    setTimeout(() => {
                        updateUserRow(userId, true, false);
                        toastr.success("Đã khóa tài khoản " + email, "", {
                            timeOut: 5000,
                            extendedTimeOut: 2000
                        });
                    }, 0);
                    return;
                }

                // Xử lý lỗi
                const errorData = await response.text();
                console.log('Server response:', errorData);
                if (response.status === 400) {
                    toastr.warning(errorData || "Yêu cầu không hợp lệ", "", {
                        timeOut: 5000,
                        extendedTimeOut: 2000
                    });
                } else {
                    toastr.error("Không thể khóa tài khoản", "", {
                        timeOut: 5000,
                        extendedTimeOut: 2000
                    });
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }

        async function handleUnlock(userId, email) {
            try {
                toastr.info("Đang mở khóa tài khoản...", "", {
                    timeOut: 5000,
                    extendedTimeOut: 2000
                });
                const response = await fetch('/UserAdmin/Unlock?id=' + userId, {
                    method: 'POST',
                    headers: {
                        'Accept': 'application/json'
                    }
                });
                
                // Cập nhật UI ngay lập tức nếu status code là 200-299
                if (response.ok) {
                    // Cập nhật UI ngay lập tức
                    setTimeout(() => {
                        updateUserRow(userId, false, false);
                        toastr.success("Đã mở khóa tài khoản " + email, "", {
                            timeOut: 5000,
                            extendedTimeOut: 2000
                        });
                    }, 0);
                    return;
                }

                // Xử lý lỗi
                const errorData = await response.text();
                console.log('Server response:', errorData);
                if (response.status === 400) {
                    toastr.warning(errorData || "Yêu cầu không hợp lệ", "", {
                        timeOut: 5000,
                        extendedTimeOut: 2000
                    });
                } else {
                    toastr.error("Không thể mở khóa tài khoản", "", {
                        timeOut: 5000,
                        extendedTimeOut: 2000
                    });
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }

        async function handleRestrict(userId, email) {
            try {
                toastr.info("Đang hạn chế tài khoản...", "", {
                    timeOut: 5000,
                    extendedTimeOut: 2000
                });
                const response = await fetch('/UserAdmin/Restrict?id=' + userId, {
                    method: 'POST',
                    headers: {
                        'Accept': 'application/json'
                    }
                });
                
                // Cập nhật UI ngay lập tức nếu status code là 200-299
                if (response.ok) {
                    updateUserRow(userId, false, true);
                    toastr.success("Đã hạn chế tài khoản " + email, "", {
                        timeOut: 5000,
                        extendedTimeOut: 2000
                    });
                    return;
                }

                // Xử lý lỗi
                const errorData = await response.text();
                console.log('Server response:', errorData);
                if (response.status === 400) {
                    toastr.warning(errorData || "Yêu cầu không hợp lệ", "", {
                        timeOut: 5000,
                        extendedTimeOut: 2000
                    });
                } else {
                    toastr.error("Không thể hạn chế tài khoản", "", {
                        timeOut: 5000,
                        extendedTimeOut: 2000
                    });
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }

        async function handleUnrestrict(userId, email) {
            try {
                toastr.info("Đang bỏ hạn chế tài khoản...", "", {
                    timeOut: 5000,
                    extendedTimeOut: 2000
                });
                const response = await fetch('/UserAdmin/Unrestrict?id=' + userId, {
                    method: 'POST',
                    headers: {
                        'Accept': 'application/json'
                    }
                });
                
                // Cập nhật UI ngay lập tức nếu status code là 200-299
                if (response.ok) {
                    updateUserRow(userId, false, false);
                    toastr.success("Đã bỏ hạn chế tài khoản " + email, "", {
                        timeOut: 5000,
                        extendedTimeOut: 2000
                    });
                    return;
                }

                // Xử lý lỗi
                const errorData = await response.text();
                console.log('Server response:', errorData);
                if (response.status === 400) {
                    toastr.warning(errorData || "Yêu cầu không hợp lệ", "", {
                        timeOut: 5000,
                        extendedTimeOut: 2000
                    });
                } else {
                    toastr.error("Không thể bỏ hạn chế tài khoản", "", {
                        timeOut: 5000,
                        extendedTimeOut: 2000
                    });
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }

        // Khởi tạo và cấu hình SignalR
        // Tạo device fingerprint
        function generateDeviceFingerprint() {
            const info = {
                userAgent: navigator.userAgent,
                language: navigator.language,
                platform: navigator.platform,
                screenResolution: `${window.screen.width}x${window.screen.height}`,
                timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
                deviceMemory: navigator.deviceMemory,
                hardwareConcurrency: navigator.hardwareConcurrency,
                devicePixelRatio: window.devicePixelRatio
            };
            return btoa(JSON.stringify(info));
        }

        var connection = new signalR.HubConnectionBuilder()
            .withUrl("/accountHub", {
                headers: {
                    "X-Device-Fingerprint": generateDeviceFingerprint()
                }
            })
            .withAutomaticReconnect([0, 2000, 5000, 10000, 15000, 30000])
            .configureLogging(signalR.LogLevel.Debug)
            .build();

        let isConnected = false;

        function updateUserRow(userId, isLocked, isRestricted) {
            console.log("Updating row:", { userId, isLocked, isRestricted });
            const row = document.querySelector(`tr[data-user-id="${userId}"]`);
            if (!row) {
                console.warn("Row not found for userId:", userId);
                return;
            }

            // Force a reflow để đảm bảo các thay đổi được áp dụng ngay lập tức
            row.style.display = 'none';
            row.offsetHeight; // Force a reflow
            row.style.display = '';

            // Cập nhật class của row
            const newClass = isLocked ? "table-danger" : isRestricted ? "table-warning" : "";
            row.className = newClass;

            // Cập nhật cột trạng thái
            const statusCell = row.querySelector('td:nth-child(4)');
            if (statusCell) {
                let statusHtml = '';
                if (isLocked) {
                    statusHtml = '<span class="badge bg-danger">Đã khóa</span>';
                } else if (isRestricted) {
                    statusHtml = '<span class="badge bg-warning">Bị hạn chế</span>';
                } else {
                    statusHtml = '<span class="badge bg-success">Hoạt động</span>';
                }
                statusCell.innerHTML = statusHtml;
            }

            // Cập nhật các nút
            const actionCell = row.querySelector('td:nth-child(5) .btn-group');
            if (actionCell) {
                let buttonHtml = '';
                const emailCell = row.querySelector('td:nth-child(1)');
                const email = emailCell ? emailCell.textContent.trim() : '';
                
                // Tạo các nút dựa trên trạng thái
                if (!isLocked) {
                    buttonHtml += `<button onclick="handleLock('${userId}', '${email}')" class="btn btn-sm btn-danger">
                                    <i class="fas fa-lock"></i> Khóa
                                 </button>`;
                } else {
                    buttonHtml += `<button onclick="handleUnlock('${userId}', '${email}')" class="btn btn-sm btn-success">
                                    <i class="fas fa-unlock"></i> Mở khóa
                                 </button>`;
                }

                // Chỉ hiển thị nút Hạn chế khi tài khoản không bị khóa và chưa bị hạn chế
                if (!isLocked && !isRestricted) {
                    buttonHtml += `<button onclick="handleRestrict('${userId}', '${email}')" class="btn btn-sm btn-warning">
                                    <i class="fas fa-ban"></i> Hạn chế
                                 </button>`;
                }
                // Hiển thị nút Bỏ hạn chế khi tài khoản đang bị hạn chế
                else if (isRestricted) {
                    buttonHtml += `<button onclick="handleUnrestrict('${userId}', '${email}')" class="btn btn-sm btn-info">
                                    <i class="fas fa-check"></i> Bỏ hạn chế
                                 </button>`;
                }
                actionCell.innerHTML = buttonHtml;
            }
        }

        // Xử lý cập nhật trạng thái khóa/mở khóa
        connection.on("UserStatusUpdated", function (userName, isLocked, userId, isRestricted) {
            console.log("UserStatusUpdated received:", {userName, isLocked, userId, isRestricted});
            
            // Cập nhật UI ngay lập tức
            updateUserRow(userId, isLocked, isRestricted || false);
            
            if (userName === '@ViewBag.CurrentUserName' && isLocked) {
                // Hiển thị thông báo
                toastr.error("Tài khoản của bạn đã bị khóa!", "", {
                    timeOut: 0,
                    closeButton: false,
                    tapToDismiss: false
                });
                
                // Chuyển hướng sau 2 giây
                setTimeout(() => {
                    window.location.href = '/Account/Logout';
                }, 2000);
                return;
            }
            
            if (userName === '@ViewBag.CurrentUserName') {
                if (isLocked) {
                    // Vô hiệu hóa tương tác với tất cả các phần tử
                    document.addEventListener('click', function(e) {
                        e.stopPropagation();
                        e.preventDefault();
                    }, true);
                    
                    document.addEventListener('keydown', function(e) {
                        e.stopPropagation();
                        e.preventDefault();
                    }, true);

                    // Hiển thị overlay để chặn tương tác
                    // Xóa overlay cũ nếu tồn tại
                    const existingOverlay = document.querySelector('.lock-overlay');
                    if (existingOverlay) {
                        existingOverlay.remove();
                    }

                    const overlay = document.createElement('div');
                    overlay.className = 'lock-overlay';
                    overlay.style.cssText = `
                        position: fixed;
                        top: 0;
                        left: 0;
                        right: 0;
                        bottom: 0;
                        background: rgba(0,0,0,0.85);
                        z-index: 999999;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        font-size: 24px;
                        color: white;
                        text-align: center;
                        padding: 20px;
                    `;
                    overlay.innerHTML = '<div>Tài khoản của bạn đã bị khóa.<br>Hệ thống sẽ chuyển hướng trong giây lát...</div>';
                    document.body.appendChild(overlay);

                    // Hiển thị thông báo và bắt đầu đếm ngược
                    let countdown = 3;
                    const countdownInterval = setInterval(() => {
                        toastr.error(`Tài khoản của bạn đã bị khóa! Chuyển hướng sau ${countdown} giây...`, "", {
                            timeOut: 0,
                            closeButton: false,
                            progressBar: true,
                            tapToDismiss: false,
                            preventDuplicates: true,
                            newestOnTop: true,
                            onHidden: function() {
                                clearInterval(countdownInterval);
                            }
                        });
                        countdown--;
                        if (countdown < 0) {
                            clearInterval(countdownInterval);
                            // Thực hiện logout và chuyển hướng ngay lập tức
                            (async function() {
                                try {
                                    // Thêm Anti-Forgery Token nếu cần
                                    const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
                                    
                                    // Thêm thông tin thiết bị
                    const deviceInfo = {
                        userAgent: navigator.userAgent,
                        platform: navigator.platform,
                        screenResolution: `${window.screen.width}x${window.screen.height}`,
                        devicePixelRatio: window.devicePixelRatio,
                        timestamp: new Date().getTime()
                    };

                    const response = await fetch('/Account/LogoutAndRedirect', {
                                        method: 'POST',
                                        credentials: 'include',
                                        headers: {
                                            'X-Requested-With': 'XMLHttpRequest',
                                            'Accept': 'application/json',
                                            'Content-Type': 'application/json',
                                            'X-Device-Info': JSON.stringify(deviceInfo),
                                            ...(token && { 'RequestVerificationToken': token })
                                        }
                                    });

                                    if (response.ok) {
                                        const data = await response.json();
                                        // Đảm bảo chuyển hướng ngay lập tức
                                        if (data.redirectUrl) {
                                            window.location.href = data.redirectUrl;
                                            // Backup redirect sau 1 giây nếu window.location.href không hoạt động
                                            setTimeout(() => window.location.replace(data.redirectUrl), 1000);
                                        }
                                    }
                                    // Luôn có fallback redirect
                                    setTimeout(() => window.location.replace('/Account/Locked'), 2000);
                                } catch (error) {
                                    console.error('Logout error:', error);
                                    // Fallback cuối cùng
                                    window.location.replace('/Account/Locked');
                                }
                            })();
                        }
                    }, 1000);
                }
            } else {
                if (isLocked) {
                    toastr.info("Tài khoản " + userName + " đã bị khóa", "", {
                        timeOut: 5000,
                        extendedTimeOut: 2000
                    });
                } else {
                    toastr.info("Tài khoản " + userName + " đã được mở khóa", "", {
                        timeOut: 5000,
                        extendedTimeOut: 2000
                    });
                }
            }
        });

        // Xử lý cập nhật trạng thái hạn chế
        connection.on("UserRestricted", function (userName, reason, userId) {
            console.log("UserRestricted received:", {userName, reason, userId});
            
            updateUserRow(userId, false, true);

            if (userName === '@ViewBag.CurrentUserName') {
                // Vô hiệu hóa điều hướng
                const blockNavigation = (e) => {
                    const href = e.target.closest('a')?.getAttribute('href');
                    if (href && !href.startsWith('/alerts')) {
                        e.preventDefault();
                        e.stopPropagation();
                        toastr.warning("Tài khoản của bạn đang bị hạn chế. Bạn chỉ có thể xem trang cảnh báo.", "", {
                            timeOut: 3000,
                            closeButton: true
                        });
                        return false;
                    }
                };

                // Thêm listener để chặn điều hướng
                document.addEventListener('click', blockNavigation, true);

                // Hiển thị thông báo
                toastr.warning("Tài khoản của bạn đã bị hạn chế. Bạn sẽ chỉ có thể xem trang cảnh báo.", "", {
                    timeOut: 0,
                    closeButton: false,
                    progressBar: true,
                    tapToDismiss: false
                });
                
                // Chuyển hướng về trang alerts/index
                setTimeout(() => {
                    window.location.href = '/alerts/index';
                }, 3000);
            } else {
                toastr.info("Tài khoản " + userName + " đã bị hạn chế", "", {
                    timeOut: 5000,
                    extendedTimeOut: 2000
                });
            }
        });

        // Xử lý cập nhật trạng thái bỏ hạn chế
        connection.on("UserUnrestricted", function (userName, userId) {
            console.log("UserUnrestricted received:", {userName, userId});
            
            // Cập nhật UI ngay lập tức
            setTimeout(() => {
                updateUserRow(userId, false, false);
            }, 0);

            if (userName === '@ViewBag.CurrentUserName') {
                toastr.success("Tài khoản của bạn đã được bỏ hạn chế.", "", {
                    timeOut: 5000,
                    extendedTimeOut: 2000
                });
            } else {
                toastr.info("Tài khoản " + userName + " đã được bỏ hạn chế", "", {
                    timeOut: 5000,
                    extendedTimeOut: 2000
                });
            }
        });

        // Khởi động kết nối
        connection.on("connectionEstablished", function() {
            console.log("SignalR connection established");
        });

        connection.start()
            .then(function() {
                console.log("SignalR Connected");
            })
            .catch(function(err) {
                console.error("SignalR Connection Error: ", err);
                toastr.error("Lỗi kết nối đến server");
            });
    </script>
}