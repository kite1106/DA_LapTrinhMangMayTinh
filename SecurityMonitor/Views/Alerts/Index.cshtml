@model IEnumerable<SecurityMonitor.DTOs.Alerts.AlertListDto>
@{
    ViewData["Title"] = "Quản lý cảnh báo";
    Layout = User.IsInRole("Admin") ? "_AdminLayout" : "_UserLayout";
}

<div class="container-fluid mt-4">
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center" style="background: linear-gradient(45deg, #1a237e, #283593); color: white;">
            <div>
                <h4 class="mb-0"><i class="fas fa-shield-alt me-2"></i> @ViewData["Title"]</h4>
            </div>
            <div class="btn-group">
                <button class="btn btn-outline-light btn-sm px-3" id="refreshAlerts">
                    <i class="fas fa-sync-alt me-1"></i> Làm mới
                </button>
            <div class="btn-group">
                <button class="btn btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown">
                    <i class="fas fa-filter"></i> Lọc
                </button>
                <div class="dropdown-menu dropdown-menu-end">
                    <h6 class="dropdown-header">Mức độ nghiêm trọng</h6>
                    <div class="dropdown-item">
                        <div class="form-check">
                            <input class="form-check-input severity-filter" type="checkbox" id="filterCritical" checked data-severity="Critical">
                            <label class="form-check-label text-danger" for="filterCritical">
                                <i class="fas fa-exclamation-circle"></i> Critical
                            </label>
                        </div>
                    </div>
                    <div class="dropdown-item">
                        <div class="form-check">
                            <input class="form-check-input severity-filter" type="checkbox" id="filterHigh" checked data-severity="High">
                            <label class="form-check-label text-warning" for="filterHigh">
                                <i class="fas fa-exclamation-triangle"></i> High
                            </label>
                        </div>
                    </div>
                    <div class="dropdown-divider"></div>
                    <h6 class="dropdown-header">Trạng thái</h6>
                    <div class="dropdown-item">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="filterNew" checked>
                            <label class="form-check-label" for="filterNew">
                                Mới
                            </label>
                        </div>
                    </div>
                    <div class="dropdown-item">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="filterInProgress" checked>
                            <label class="form-check-label" for="filterInProgress">
                                Đang xử lý
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row g-4">
        <div class="col-md-3">
            <div class="card border-0 shadow-sm" style="background: linear-gradient(45deg, #dc3545, #ff6b6b)">
                <div class="card-body text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-subtitle opacity-75">Cảnh báo nghiêm trọng</h6>
                            <h2 class="card-title mb-0 fw-bold">@Model.Count(a => a.SeverityLevel == "Critical")</h2>
                        </div>
                        <i class="bi bi-exclamation-diamond-fill fs-1 opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm" style="background: linear-gradient(45deg, #ffc107, #ffdb4d)">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-subtitle text-dark opacity-75">Cảnh báo cao</h6>
                            <h2 class="card-title mb-0 text-dark fw-bold">@Model.Count(a => a.SeverityLevel == "High")</h2>
                        </div>
                        <i class="bi bi-exclamation-triangle-fill fs-1 text-dark opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm" style="background: linear-gradient(45deg, #0dcaf0, #5cdcff)">
                <div class="card-body text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-subtitle opacity-75">Đang xử lý</h6>
                            <h2 class="card-title mb-0 fw-bold">@Model.Count(a => a.Status == "In Progress")</h2>
                        </div>
                        <i class="bi bi-hourglass-split fs-1 opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm" style="background: linear-gradient(45deg, #198754, #2bd583)">
                <div class="card-body text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-subtitle opacity-75">Đã xử lý</h6>
                            <h2 class="card-title mb-0 fw-bold">@Model.Count(a => a.Status == "Resolved")</h2>
                        </div>
                        <i class="bi bi-check-circle-fill fs-1 opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card shadow-sm mt-4 border-0">
        <div class="card-body px-0">
            <div class="table-responsive">
                <table id="alertsTable" class="table table-hover align-middle" style="width:100%">
                    <thead>
                        <tr>
                            <th>Thời gian</th>
                            <th>Tiêu đề</th>
                            <th>Mức độ</th>
                            <th>IP nguồn</th>
                            <th>Trạng thái</th>
                            <th>Thao tác</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var alert in Model)
                        {
                            <tr class="@(alert.SeverityLevel == "Critical" ? "table-danger" : alert.SeverityLevel == "High" ? "table-warning" : "")">
                                <td>
                                    <div class="d-flex flex-column">
                                        <span>@alert.Timestamp.AddHours(7).ToString("HH:mm:ss")</span>
                                        <small class="text-muted">@alert.Timestamp.AddHours(7).ToString("dd/MM/yyyy")</small>
                                    </div>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        @if (alert.SeverityLevel == "Critical")
                                        {
                                            <i class="bi bi-exclamation-diamond-fill text-danger me-2"></i>
                                        }
                                        else if (alert.SeverityLevel == "High")
                                        {
                                            <i class="bi bi-exclamation-triangle-fill text-warning me-2"></i>
                                        }
                                        <span>@alert.Title</span>
                                    </div>
                                </td>
                                <td>
                                    <span class="badge @(alert.SeverityLevel == "Critical" ? "bg-danger" : "bg-warning text-dark")">
                                        @alert.SeverityLevel
                                    </span>
                                </td>
                                <td><code>@alert.SourceIp</code></td>
                                <td>
                                    <span class="badge @(alert.Status == "New" ? "bg-info" : 
                                                       alert.Status == "In Progress" ? "bg-primary" :
                                                       alert.Status == "Resolved" ? "bg-success" : "bg-secondary")">
                                        @alert.Status
                                    </span>
                                </td>
                                <td>
                                    <div class="btn-group">
                                        <button class="btn btn-sm btn-light" title="Xem chi tiết" 
                                                data-bs-toggle="modal" data-bs-target="#alertDetails" data-alert-id="@alert.Id">
                                            <i class="bi bi-eye text-secondary"></i>
                                        </button>
                    
                                        @if (alert.Status != "Resolved")
                                        {
                                            <button class="btn btn-sm btn-success" data-bs-toggle="tooltip" title="Đánh dấu đã xử lý"
                                                    onclick="resolveAlert(@alert.Id)">
                                                <i class="bi bi-check-lg"></i>
                                            </button>
                                            <button class="btn btn-sm btn-danger" data-bs-toggle="tooltip" title="Chặn IP nguồn" 
                                                    onclick="blockIP('@alert.SourceIp', '@alert.Title')">
                                                <i class="bi bi-shield-fill-x"></i>
                                            </button>
                                        }
                                        <a href="https://www.abuseipdb.com/check/@alert.SourceIp" target="_blank"
                                           class="btn btn-sm btn-info" data-bs-toggle="tooltip" title="Kiểm tra IP trên AbuseIPDB">
                                            <i class="bi bi-search"></i>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Resolution Modal -->
<div class="modal fade" id="resolveAlertModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">
                    <i class="bi bi-check-circle me-2"></i>
                    Đánh dấu đã xử lý cảnh báo
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="resolveForm">
                    <input type="hidden" id="resolveAlertId" />
                    <div class="mb-3">
                        <label for="resolutionMethod" class="form-label">Phương pháp xử lý</label>
                        <select class="form-select mb-3" id="resolutionMethod">
                            <option value="">-- Chọn phương pháp --</option>
                            <option value="block_ip">Chặn IP</option>
                            <option value="update_firewall">Cập nhật tường lửa</option>
                            <option value="patch_system">Vá lỗi hệ thống</option>
                            <option value="false_positive">Cảnh báo sai</option>
                            <option value="other">Khác</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="resolutionDetails" class="form-label">Chi tiết cách xử lý</label>
                        <textarea class="form-control" id="resolutionDetails" rows="3" 
                                  placeholder="Mô tả chi tiết cách thức đã xử lý cảnh báo này..."></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label d-block">Các bước đã thực hiện</label>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="checkSource">
                            <label class="form-check-label" for="checkSource">
                                Đã kiểm tra nguồn gốc
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="checkImpact">
                            <label class="form-check-label" for="checkImpact">
                                Đã đánh giá tác động
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="implementFix">
                            <label class="form-check-label" for="implementFix">
                                Đã thực hiện biện pháp khắc phục
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="verifyFix">
                            <label class="form-check-label" for="verifyFix">
                                Đã xác nhận hiệu quả
                            </label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="bi bi-x-lg me-2"></i>Hủy
                </button>
                <button type="button" class="btn btn-success" id="submitResolution">
                    <i class="bi bi-check-lg me-2"></i>Xác nhận đã xử lý
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Alert Details Modal -->
<div class="modal fade" id="alertDetails" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div id="alertDetailsContent">
            <!-- Content will be loaded here -->
        </div>
    </div>
</div>

@section Styles {
    <link href="https://cdn.datatables.net/1.11.5/css/dataTables.bootstrap5.min.css" rel="stylesheet" />
    <link href="~/lib/toastr/toastr.min.css" rel="stylesheet" />
    <style>
        .table th { white-space: nowrap; }
        .alert-new { 
            animation: highlight 2s ease-in-out;
            animation-iteration-count: 3;
        }
        @@keyframes highlight {
            0% { background-color: transparent; }
            50% { background-color: #fff3cd; }
            100% { background-color: transparent; }
        }
        #alertsTable tbody tr {
            transition: all 0.3s ease;
        }
        #alertsTable tbody tr:hover {
            background-color: rgba(0,0,0,0.05);
        }
        .badge {
            font-size: 0.85em;
            padding: 0.4em 0.8em;
        }
    </style>
}

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.5/js/dataTables.bootstrap5.min.js"></script>
    <script src="~/lib/toastr/toastr.min.js"></script>
    <script>
        let currentAlertId = null;
        let currentAlertData = null;
        let alertsTable = null;

        // Cấu hình toastr
        toastr.options = {
            "closeButton": true,
            "progressBar": true,
            "positionClass": "toast-top-right",
            "timeOut": "0",
            "extendedTimeOut": "0",
        };

        $(document).ready(function() {
            // Handle IP blocking
            $('#blockIPBtn').click(function() {
                if (currentAlertData && currentAlertData.sourceIp) {
                    if (confirm(`Bạn có chắc muốn chặn IP ${currentAlertData.sourceIp}?`)) {
                        // Block the IP via AJAX
                        $.ajax({
                            url: '/IPBlocking/Block',
                            method: 'POST',
                            data: {
                                ip: currentAlertData.sourceIp,
                                reason: `Tự động chặn từ cảnh báo: ${currentAlertData.title}`,
                                __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                            },
                            success: function() {
                                toastr.success(`Đã chặn IP ${currentAlertData.sourceIp}`, 'Thành công');
                                $('#alertDetails').modal('hide');
                                updateStatus(currentAlertId, 3); // Mark as resolved after blocking
                            },
                            error: function() {
                                toastr.error('Không thể chặn IP', 'Lỗi');
                            }
                        });
                    }
                }
            });

            // Handle IP checking
            $('#checkIPBtn').click(function() {
                if (currentAlertData && currentAlertData.sourceIp) {
                    window.location.href = `/IPBlocking/Details?ip=${currentAlertData.sourceIp}`;
                }
            });

            // Initialize DataTable đơn giản
            alertsTable = $('#alertsTable').DataTable({
                order: [[0, 'desc']], // Sắp xếp mới nhất lên trên
                pageLength: 25,
                responsive: true,
                autoWidth: false,
                language: {
                    url: '//cdn.datatables.net/plug-ins/1.10.24/i18n/Vietnamese.json'
                }
            });

            // Initialize SignalR
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/alertHub")
                .withAutomaticReconnect()
                .configureLogging(signalR.LogLevel.Information)
                .build();

            // Connection state events
            connection.onreconnecting((error) => {
                console.log('Reconnecting to SignalR hub...', error);
            });

            connection.onreconnected((connectionId) => {
                console.log('Reconnected to SignalR hub.', connectionId);
                toastr.success('Kết nối SignalR đã được khôi phục');
            });

            connection.onclose((error) => {
                console.log('SignalR connection closed.', error);
                toastr.error('Mất kết nối với server. Vui lòng tải lại trang.');
            });

            // Update alert counts
            function updateAlertCounts() {
                $.get('/api/alerts/counts', function(data) {
                    $('.critical-count').text(data.critical);
                    $('.high-count').text(data.high);
                    $('.inprogress-count').text(data.inProgress);
                    $('.resolved-count').text(data.resolved);
                });
            }

            // Handle login alerts (from LoginMonitorMiddleware)
            connection.on("ReceiveLoginAlert", (alert) => {
                console.log('Received login alert:', alert);

                try {
                    // Play alert sound
                    const audio = new Audio('/sounds/alert.mp3');
                    audio.play().catch(e => console.log('Error playing sound:', e));

                    // Format data for DataTable
                    const timestamp = new Date(alert.timestamp);
                    const rowData = {
                        id: alert.id,
                        timestamp: `<div class="d-flex flex-column">
                            <span>${timestamp.toLocaleTimeString()}</span>
                            <small class="text-muted">${timestamp.toLocaleDateString()}</small>
                        </div>`,
                        title: `<div class="d-flex align-items-center">
                            ${alert.severity === 'High' ? 
                                '<i class="fas fa-exclamation-triangle text-danger me-2"></i>' : 
                                '<i class="fas fa-exclamation-circle text-warning me-2"></i>'}
                            ${alert.title}
                        </div>`,
                        severity: `<span class="badge ${alert.severity === 'High' ? 'bg-danger' : 'bg-warning text-dark'}">
                            ${alert.severity}
                        </span>`,
                        sourceIp: `<code>${alert.ip}</code>`,
                        status: '<span class="badge bg-info">New</span>',
                        actions: `<div class="btn-group">
                            <button class="btn btn-sm btn-light" title="Xem chi tiết" 
                                    data-bs-toggle="modal" data-bs-target="#alertDetails" data-alert-id="${alert.id}">
                                <i class="bi bi-eye text-secondary"></i>
                            </button>
                            <button class="btn btn-sm btn-success" data-bs-toggle="tooltip" title="Đánh dấu đã xử lý"
                                    onclick="resolveAlert(${alert.id})">
                                <i class="bi bi-check-lg"></i>
                            </button>
                            <button class="btn btn-sm btn-danger" data-bs-toggle="tooltip" title="Chặn IP nguồn" 
                                    onclick="blockIP('${alert.ip}', '${alert.title}')">
                                <i class="bi bi-shield-fill-x"></i>
                            </button>
                            <a href="https://www.abuseipdb.com/check/${alert.ip}" target="_blank"
                               class="btn btn-sm btn-info" data-bs-toggle="tooltip" title="Kiểm tra IP trên AbuseIPDB">
                                <i class="bi bi-search"></i>
                            </a>
                        </div>`
                    };

                    // Add row to DataTable immediately
                    const row = alertsTable.row.add(rowData).draw(false).node();
                    $(row).addClass('alert-new');
                    setTimeout(() => $(row).removeClass('alert-new'), 5000);

                    // Show notification
                    toastr.warning(alert.description, alert.title, {
                        timeOut: 0,
                        extendedTimeOut: 0,
                        closeButton: true,
                        tapToDismiss: false,
                        newestOnTop: true,
                        onclick: function() {
                            $('html, body').animate({
                                scrollTop: $("#alertsTable").offset().top
                            }, 500);
                        }
                    });

                    // Add new row to DataTable
                    if (alertsTable) {
                        location.reload();

                        // Highlight new row
                        $(row).addClass('alert-new');
                        
                        // Scroll to the new row
                        $('html, body').animate({
                            scrollTop: $(row).offset().top - 100
                        }, 500);

                        // Remove highlight after 5 seconds
                        setTimeout(() => $(row).removeClass('alert-new'), 5000);

                        // Update summary counts
                        updateAlertCounts();
                    }
                } catch (error) {
                    console.error('Error handling login alert:', error);
                    toastr.error('Có lỗi khi xử lý cảnh báo mới');
                }
            });

            // Handle regular alerts
            connection.on("ReceiveAlert", (alert) => {
                try {
                    // Play alert sound
                    const audio = new Audio('/sounds/alert.mp3');
                    audio.play().catch(e => console.log('Error playing sound:', e));

                    // Tạo HTML cho hàng mới
                    const timestamp = new Date(alert.timestamp);
                    const tr = document.createElement('tr');
                    tr.classList.add('alert-new'); // Chỉ thêm hiệu ứng highlight
                    
                    tr.innerHTML = `
                        <td>
                            <div class="d-flex flex-column">
                                <span>${timestamp.toLocaleTimeString()}</span>
                                <small class="text-muted">${timestamp.toLocaleDateString()}</small>
                            </div>
                        </td>
                        <td>
                            <div class="d-flex align-items-center">
                                ${alert.severityLevel === 'Critical' ? 
                                    '<i class="bi bi-exclamation-diamond-fill text-danger me-2"></i>' : 
                                    '<i class="bi bi-exclamation-triangle-fill text-warning me-2"></i>'}
                                <span>${alert.title}</span>
                            </div>
                        </td>
                        <td>
                            <span class="badge ${alert.severityLevel === 'Critical' ? 'bg-danger' : 'bg-warning text-dark'}">
                                ${alert.severityLevel}
                            </span>
                        </td>
                        <td><code>${alert.sourceIp}</code></td>
                        <td><span class="badge bg-info">New</span></td>
                        <td>
                            <div class="btn-group">
                                <button class="btn btn-sm btn-light" title="Xem chi tiết" 
                                        data-bs-toggle="modal" data-bs-target="#alertDetails" data-alert-id="${alert.id}">
                                    <i class="bi bi-eye text-secondary"></i>
                                </button>
                              
                                <button class="btn btn-sm btn-success" data-bs-toggle="tooltip" title="Đánh dấu đã xử lý"
                                        onclick="resolveAlert(${alert.id})">
                                    <i class="bi bi-check-lg"></i>
                                </button>
                                <button class="btn btn-sm btn-danger" data-bs-toggle="tooltip" title="Chặn IP nguồn" 
                                        onclick="blockIP('${alert.sourceIp}', '${alert.title}')">
                                    <i class="bi bi-shield-fill-x"></i>
                                </button>
                                <a href="https://www.abuseipdb.com/check/${alert.sourceIp}" target="_blank"
                                   class="btn btn-sm btn-info" data-bs-toggle="tooltip" title="Kiểm tra IP trên AbuseIPDB">
                                    <i class="bi bi-search"></i>
                                </a>
                            </div>
                        </td>
                    `;

                    // Thêm vào đầu bảng
                    const tbody = document.querySelector('#alertsTable tbody');
                    tbody.insertBefore(tr, tbody.firstChild);
                    
                    // Hiệu ứng highlight
                    tr.classList.add('alert-new');
                    setTimeout(() => tr.classList.remove('alert-new'), 5000);

                    // Show notification
                    if (alert.severityLevel === 'Critical') {
                        toastr.error(`Cảnh báo mới: ${alert.title}`, 'Cảnh báo nghiêm trọng', {
                            timeOut: 0,
                            extendedTimeOut: 0,
                            closeButton: true,
                            tapToDismiss: false,
                            onclick: function() {
                                $('html, body').animate({
                                    scrollTop: $("#alertsTable").offset().top
                                }, 500);
                            }
                        });
                    } else {
                        toastr.warning(`Cảnh báo mới: ${alert.title}`, 'Cảnh báo mới', {
                            timeOut: 0,
                            extendedTimeOut: 0,
                            closeButton: true,
                            tapToDismiss: false,
                            onclick: function() {
                                $('html, body').animate({
                                    scrollTop: $("#alertsTable").offset().top
                                }, 500);
                            }
                        });
                    }
                } catch (error) {
                    console.error('Error handling regular alert:', error);
                    toastr.error('Có lỗi khi xử lý cảnh báo mới');
                }
            });

            // Handle resolution form submission
            $('#submitResolution').click(function() {
                const alertId = $('#resolveAlertId').val();
                const method = $('#resolutionMethod').val();
                const details = $('#resolutionDetails').val();
                const checks = {
                    sourceChecked: $('#checkSource').is(':checked'),
                    impactAssessed: $('#checkImpact').is(':checked'),
                    fixImplemented: $('#implementFix').is(':checked'),
                    fixVerified: $('#verifyFix').is(':checked')
                };

                if (!method) {
                    toastr.warning('Vui lòng chọn phương pháp xử lý');
                    return;
                }

                if (!details) {
                    toastr.warning('Vui lòng nhập chi tiết cách xử lý');
                    return;
                }

                const resolution = `[${method.toUpperCase()}] ${details}\n\nKiểm tra: ${
                    Object.entries(checks)
                        .filter(([_, checked]) => checked)
                        .map(([key, _]) => key)
                        .join(', ')
                }`;

                $.ajax({
                    url: `/api/alerts/${alertId}/resolve`,
                    method: 'POST',
                    data: JSON.stringify({ resolution: resolution }),
                    contentType: 'application/json',
                    success: function() {
                        toastr.success('Đã đánh dấu cảnh báo là đã xử lý');
                        $('#resolveAlertModal').modal('hide');
                        location.reload();
                    },
                    error: function(xhr, status, error) {
                        toastr.error('Không thể xử lý cảnh báo', 'Lỗi');
                    }
                });
            });

            // Reset resolution form when modal is hidden
            $('#resolveAlertModal').on('hidden.bs.modal', function() {
                $('#resolveForm')[0].reset();
            });

            // Start SignalR connection
            connection.start()
                .then(() => {
                    console.log('Connected to SignalR hub');
                    toastr.success('Đã kết nối với server');
                })
                .catch(err => {
                    console.error('Error connecting to SignalR:', err);
                    toastr.error('Không thể kết nối với server. Vui lòng tải lại trang.');
                });

            // Handle alert details modal
            $('#alertDetails').on('show.bs.modal', function (event) {
                const button = $(event.relatedTarget);
                const alertId = button.data('alert-id');
                currentAlertId = alertId;

                // Load alert details from server
                $('#alertDetailsContent').load(`/Alerts/Details/${alertId}?partial=true`, function(response, status, xhr) {
                    if (status == "error") {
                        $('#alertDetailsContent').html(`
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Lỗi</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                </div>
                                <div class="modal-body">
                                    <div class="alert alert-danger">
                                        Không thể tải thông tin chi tiết cảnh báo. Vui lòng thử lại sau.
                                    </div>
                                </div>
                            </div>
                        `);
                    }
                });
            });

            // Refresh alerts
            $('#refreshAlerts').click(function() {
                location.reload();
            });
        });

        // Cập nhật trạng thái cảnh báo
        function updateStatus(alertId, status) {
            $.ajax({
                url: `/api/alerts/${alertId}/status`,
                method: 'PUT',
                data: JSON.stringify({ status: status }),
                contentType: 'application/json',
                success: function() {
                    toastr.success('Đã cập nhật trạng thái cảnh báo');
                    location.reload();
                },
                error: function(xhr, status, error) {
                    toastr.error('Không thể cập nhật trạng thái cảnh báo', 'Lỗi');
                }
            });
        }

        // Xử lý cảnh báo
        function resolveAlert(alertId) {
            // Show resolve modal
            const modal = $('#resolveAlertModal');
            modal.find('#resolveAlertId').val(alertId);
            modal.modal('show');
        }

        // Chặn IP
        function blockIP(ip, reason) {
            if (confirm(`Bạn có chắc muốn chặn IP ${ip}?`)) {
                $.ajax({
                    url: '/IPBlocking/Block',
                    method: 'POST',
                    data: {
                        ip: ip,
                        reason: `Chặn từ cảnh báo: ${reason}`,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function() {
                        toastr.success(`Đã chặn IP ${ip}`, 'Thành công');
                        location.reload();
                    },
                    error: function() {
                        toastr.error('Không thể chặn IP', 'Lỗi');
                    }
                });
            }
        }
    </script>
}
